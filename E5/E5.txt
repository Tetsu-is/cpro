---------------------------------------------------------
[E5] 第5章 関数(2) に関する考察・感想用テンプレート
---------------------------------------------------------

課題： E5
学生番号： 37022497
氏名： 石本　哲郎
作成日： 5/11
-----------------------------------------------
(E5_1)

学習内容：
昇給回数から時給をもとめるプログラムを作成した。

結果：
$ ./a.exe
100
1ヶ月目の時給は 100円です．
2ヶ月目の時給は 100円です．
3ヶ月目の時給は 100円です．
4ヶ月目の時給は 110円です．
5ヶ月目の時給は 110円です．
6ヶ月目の時給は 110円です．
7ヶ月目の時給は 120円です．
8ヶ月目の時給は 120円です．
9ヶ月目の時給は 120円です．
10ヶ月目の時給は 130円です．
11ヶ月目の時給は 130円です．
12ヶ月目の時給は 130円です．
13ヶ月目の時給は 140円です．
14ヶ月目の時給は 140円です．
15ヶ月目の時給は 140円です．
16ヶ月目の時給は 150円です．
17ヶ月目の時給は 150円です．
18ヶ月目の時給は 150円です．
19ヶ月目の時給は 160円です．
20ヶ月目の時給は 160円です．


習得した内容・反省・考察など：
先に月を表す変数から１を引いたうえで、３で割った商を求めることで
昇給回数を求められることが分かった。

-----------------------------------------------
(E5_2) 

学習内容：
リスト5.17を実行し修正した。

結果：
5.17の場合
13C1=4  13C2=24 13C3=88 13C4=221        13C5=399
13C6=532        13C7=532        13C8=399        13C9=221
13C10=88        13C11=24        13C12=4 13C13=1
(計算結果に誤りがある)

変更後
13C0=1  13C1=13 13C2=78 13C3=286        13C4=715 
13C5=1287       13C6=1716       13C7=1716       13C8=1287
13C9=715       13C10=286       13C11=78        13C12=13        13C13=1
(計算結果が正しい)

30以上の場合
30C0=1  30C1=1  30C2=-1 30C3=-2 30C4=11 30C5=1  30C6=-2 30C7=2  30C8=-1
(計算結果に誤りがある)

習得した内容・反省・考察など：
int型変数は最低限保証されているのが16bitであるため
オーバーフローしてしまう。一方でlong intは32bit保証されている
ために20以上としたときもオーバーフローをおこさずに計算できる。
30以上に設定した場合はオーバーフロー起こしている。この場合は
unsignedなどを使って対策する必要があることが分かった。
-----------------------------------------------
(E5_3) 

学習内容：
combi関数をcombi2関数に修正して実行した。

結果：
（combi関数をcombi2に変えた時）
正しく計算される。

（加えてtの上限を20としたとき）
13C0=1.000000   13C1=13.000000  13C2=78.000000  13C3=286.000000
13C4=715.000000 13C5=1287.000000        13C6=1716.000000
13C7=1716.000000        13C8=1287.000000        13C9=715.000000
13C10=286.000000        13C11=78.000000 13C12=13.000000 13C13=1.00000
13c0以降も正しく計算されている。

（tの上限を30以上としたとき一部抜粋）
35C0=1.000000   35C1=35.000000  35C2=595.000000 35C3=6545.000000        
35C4=52360.000000       35C5=324632.00000035C6=1623160.000000   35C7=6724520.000000
n=35でも正しく計算されている。

習得した内容・反省・考察など：
今回は掛ける操作と割る操作を同時に行ったためにいずれの場合においても
変数の値が著しく大きくなる、
厳密にはint型、long int型で最低限保証される桁数を超えるということが
起こらなかったためオーバーフローが起こらなかったと考えられる。
-----------------------------------------------
(E5_4) 

学習内容：
互いに素な自然数の組を列挙しその数を出力するプログラムを作成した。

結果：
$ ./"E5_4.exe"
s, tを入力してください（s < t）: 32 40
(32, 33)
(32, 35)
(32, 37)
(32, 39)
(33, 34)
(33, 35)
(33, 37)
(33, 38)
(33, 40)
(34, 35)
(34, 37)
(34, 39)
(35, 36)
(35, 37)
(35, 38)
(35, 39)
(36, 37)
(37, 38)
(37, 39)
(37, 40)
(38, 39)
(39, 40)
22個

習得した内容・反省・考察など：
ユークリッドの互除法をプログラムで使うことで最大公約数を求める、
互いに素な数を見つけることができることが分かった。
-----------------------------------------------
(E5_5) 

学習内容：
x の 3 乗根を計算するプログラムを作成した。

結果：
$ ./"E5_5.exe"
        x       r               r*r*r
        1.0     1.0000000000    1.0000000000
        2.0     1.2599210499    2.0000000000
        3.0     1.4422495703    3.0000000000
        4.0     1.5874010520    4.0000000000
        5.0     1.7099759467    5.0000000000
        6.0     1.8171205928    6.0000000000
        7.0     1.9129311828    7.0000000000
        8.0     2.0000000000    8.0000000000
        9.0     2.0800838231    9.0000000000
        10.0    2.1544346900    10.0000000000

習得した内容・反省・考察など：
打切り誤差を設定し、それを条件に計算を続けることで
任意の精度で計算を行えることが分かった。
-----------------------------------------------
(E5_6) 

学習内容：

結果：
$ ./a
ax^2+bx+c=0のa b cを入力してください >>> 1 2 3
実数解はありません

$ ./a
ax^2+bx+c=0のa b cを入力してください >>> 1 4 4
重解は x = -2.000000 です

$ ./a
ax^2+bx+c=0のa b cを入力してください >>> 1 -5 6
2個の実数解のうち大きい方は x = 3.000000 です

習得した内容・反省・考察など：
math.hをincludeすることで数学の計算を使ったプログラムを
簡単に作成できることが分かった。
-----------------------------------------------
(E5_7) 

学習内容：
正の整数 n を引数とし， n 以上 n+10 未満の整数の 2 乗の和 sn
を 戻り値とする関数 int sos(int n) を作成した。

結果：
$ ./a.exe
1
t = 1 の場合： i = 1，s_1 = 385


習得した内容・反省・考察など：
条件を満たすまで処理し続ける場合は無限ループをつくり
条件を満たすときにループを抜け出すようにすればよいことが分かった。
-----------------------------------------------
(E5_8) 

学習内容：
漸化式を用いて数列の各項を求めるプログラムを作成した。

結果：
$ ./a
1
a_0 =  1
a_1 =  2
a_2 =  3
a_3 =  2
a_4 =  -5
a_5 =  -26
a_6 =  -77
a_7 =  -190
a_8 =  -429
a_9 =  -922


習得した内容・反省・考察など：
漸化式による数列はforループ用いて簡単に表すことができることが分かった。
-----------------------------------------------
(E5_9) 

学習内容：

予想：
1.予想
(inc  1) a = 101   グローバル変数の a
(inc  2) b = 11   inc関数の引数の b
(main 1) a = 10   main関数のローカル変数の a
(inc  1) a = 102   グローバル変数の a
(inc  2) b = 21   main関数のローカル変数の b
(main 2) b = 20   main関数のローカル変数の b
(main 3) c = 102   main関数のローカル変数の c

結果：
$ ./a
(inc  1) a = 101　グローバル変数の a
(inc  2) b =  11　inc関数の引数の b
(main 1) a =  10　main関数のローカル変数の a
(inc  1) a = 102　グローバル変数の a
(inc  2) b =  21　main関数のローカル変数の b
(main 2) b =  20　main関数のローカル変数の b
(main 3) c = 102　main関数のローカル変数の c



習得した内容・反省・考察など：
(inc  1) a = 101   グローバル変数の a
(inc  2) b = 11   inc関数の引数の b
(main 1) a = 10   main関数のローカル変数の a
(inc  1) a = 102   グローバル変数の a
(inc  2) b = 21   main関数のローカル変数の b
(main 2) b = 20   main関数のローカル変数の b
(main 3) c = 102   main関数のローカル変数の c
-----------------------------------------------
(E5_10*) 

学習内容：
 exを計算するプログラムを作成した。

結果：
$ ./a
     x      myexp(x)
   1.0       2.71828
   2.0       7.38906
   3.0      20.08554
   4.0      54.59815
   5.0     148.41316
   6.0     403.42879
   7.0    1096.63316
   8.0    2980.95799
   9.0    8103.08393
  10.0   22026.46579


習得した内容・反省・考察など：
各項に規則性のあるもの、条件を満たすまで処理を続けるものに
関してはfor文、while文が有効であることが分かった。
-----------------------------------------------
[E5] 全体に対する感想などを以下に記すこと．
今回は数式を考えるのが大変でした。
所要時間： （  ７   ）時間
